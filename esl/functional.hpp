#ifndef ESL_FUNCTIONAL_HPP
#define ESL_FUNCTIONAL_HPP

#include "intrin.hpp"
#include "limits.hpp"
#include "utility.hpp"

#include <cstdint>
#include <cstring>
#include <functional>
#include <string_view>
#include <tuple>
#include <utility>

#include <unordered_map>
#include <vector>

namespace esl {

// Modified from boost/container_hash/hash.hpp
/*
 * Boost Software License - Version 1.0,
 * http://www.boost.org/LICENSE_1_0.txt
 * ----------------------------------------------------------------------------
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#if (ESL_SIZE_WIDTH == 64)

inline constexpr void hash_combine_(std::size_t& h, std::size_t k) noexcept {
    const std::size_t m = 0xc6a4a7935bd1e995U;

    k *= m;
    k ^= k >> 47;
    k *= m;

    h ^= k;
    h *= m;

    // Completely arbitrary number, to prevent 0's
    // from hashing to 0.
    h += 0xe6546b64U;
}

#else

inline constexpr void hash_combine_(std::size_t& h, std::size_t k) noexcept {
    const std::size_t c1 = 0xcc9e2d51U;
    const std::size_t c2 = 0x1b873593U;

    k *= c1;
    k = rotl(k, 15);
    k *= c2;

    h ^= k;
    h = rotl(h, 13);
    h = h * 5 + 0xe6546b64U;
}

#endif

// hash_combine
inline constexpr std::size_t hash_combine(std::size_t h, std::size_t k) {
    hash_combine_(h, k);
    return h;
}

// hash_value
template <class T>
inline std::size_t hash_value(const T& value) noexcept(noexcept(std::declval<std::hash<T>>()(std::declval<const T&>()))) {
    return std::hash<T>{}(value);
}
template <class T>
inline std::size_t hash_value(const T& value, std::size_t h) noexcept(noexcept(std::declval<std::hash<T>>()(std::declval<const T&>()))) {
    // Avoid MSVC stdext::hash_value
    return hash_combine(h, ::esl::hash_value(value));
}
// stdhash
inline std::size_t stdhash(const void* buf, std::size_t size) noexcept {
    return std::hash<std::string_view>{}(std::string_view(static_cast<const char*>(buf), size));
}
inline std::size_t stdhash(const void* buf, std::size_t size, std::size_t h) noexcept {
    return hash_combine(h, stdhash(buf, size));
}

} // namespace esl

namespace std {

// hash<std::pair<T1, T2>>
template <class T1, class T2>
struct hash<std::pair<T1, T2>> {
    std::size_t operator()(const std::pair<T1, T2>& p) const {
        return ::esl::hash_value(p.second, ::esl::hash_value(p.first));
    }
};

// hash<std::tuple<Ts..>>
template <class... Ts>
struct hash<std::tuple<Ts...>> {
    std::size_t operator()(const std::tuple<Ts...>& t) const {
        return hash_(t, std::make_index_sequence<sizeof...(Ts)>{});
    }

private:
    template <std::size_t... I>
    std::size_t hash_(const std::tuple<Ts...>& t, std::index_sequence<I...>) const {
        std::size_t h = 0;
        (..., (h = ::esl::hash_value(std::get<I>(t), h)));
        return h;
    }
};

// hash<std::vector>
template <class T, class Alloc>
struct hash<std::vector<T, Alloc>> {
    std::size_t operator()(const std::vector<T, Alloc>& vec) const {
        std::size_t h = 0;
        for (auto& v : vec) {
            h = ::esl::hash_value(v, h);
        }
        return h;
    }
};
template <class Key, class T, class Hash, class KeyEqual, class Alloc>
struct hash<std::unordered_map<Key, T, Hash, KeyEqual, Alloc>> {
    std::size_t operator()(const std::unordered_map<Key, T, Hash, KeyEqual, Alloc>& m) const {
        std::size_t h = 0;
        for (auto& v : m) {
            h = ::esl::hash_value(v, h);
        }
        return h;
    }
};

// TODO more container

} // namespace std

namespace esl {

/* zlib License
 * http://zlib.net/zlib_license.html
 * ----------------------------------------------------------------------------
 * Copyright (C) 1995-2017 Jean-loup Gailly and Mark Adler
 *
 * This software is provided 'as-is', without any express or implied
 * warranty.  In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */

inline constexpr std::uint32_t crc32_table_internal_[256] = {
    0x00000000U, 0x77073096U, 0xee0e612cU, 0x990951baU, 0x076dc419U, 0x706af48fU, 0xe963a535U, 0x9e6495a3U, 0x0edb8832U, 0x79dcb8a4U, 0xe0d5e91eU, 0x97d2d988U,
    0x09b64c2bU, 0x7eb17cbdU, 0xe7b82d07U, 0x90bf1d91U, 0x1db71064U, 0x6ab020f2U, 0xf3b97148U, 0x84be41deU, 0x1adad47dU, 0x6ddde4ebU, 0xf4d4b551U, 0x83d385c7U,
    0x136c9856U, 0x646ba8c0U, 0xfd62f97aU, 0x8a65c9ecU, 0x14015c4fU, 0x63066cd9U, 0xfa0f3d63U, 0x8d080df5U, 0x3b6e20c8U, 0x4c69105eU, 0xd56041e4U, 0xa2677172U,
    0x3c03e4d1U, 0x4b04d447U, 0xd20d85fdU, 0xa50ab56bU, 0x35b5a8faU, 0x42b2986cU, 0xdbbbc9d6U, 0xacbcf940U, 0x32d86ce3U, 0x45df5c75U, 0xdcd60dcfU, 0xabd13d59U,
    0x26d930acU, 0x51de003aU, 0xc8d75180U, 0xbfd06116U, 0x21b4f4b5U, 0x56b3c423U, 0xcfba9599U, 0xb8bda50fU, 0x2802b89eU, 0x5f058808U, 0xc60cd9b2U, 0xb10be924U,
    0x2f6f7c87U, 0x58684c11U, 0xc1611dabU, 0xb6662d3dU, 0x76dc4190U, 0x01db7106U, 0x98d220bcU, 0xefd5102aU, 0x71b18589U, 0x06b6b51fU, 0x9fbfe4a5U, 0xe8b8d433U,
    0x7807c9a2U, 0x0f00f934U, 0x9609a88eU, 0xe10e9818U, 0x7f6a0dbbU, 0x086d3d2dU, 0x91646c97U, 0xe6635c01U, 0x6b6b51f4U, 0x1c6c6162U, 0x856530d8U, 0xf262004eU,
    0x6c0695edU, 0x1b01a57bU, 0x8208f4c1U, 0xf50fc457U, 0x65b0d9c6U, 0x12b7e950U, 0x8bbeb8eaU, 0xfcb9887cU, 0x62dd1ddfU, 0x15da2d49U, 0x8cd37cf3U, 0xfbd44c65U,
    0x4db26158U, 0x3ab551ceU, 0xa3bc0074U, 0xd4bb30e2U, 0x4adfa541U, 0x3dd895d7U, 0xa4d1c46dU, 0xd3d6f4fbU, 0x4369e96aU, 0x346ed9fcU, 0xad678846U, 0xda60b8d0U,
    0x44042d73U, 0x33031de5U, 0xaa0a4c5fU, 0xdd0d7cc9U, 0x5005713cU, 0x270241aaU, 0xbe0b1010U, 0xc90c2086U, 0x5768b525U, 0x206f85b3U, 0xb966d409U, 0xce61e49fU,
    0x5edef90eU, 0x29d9c998U, 0xb0d09822U, 0xc7d7a8b4U, 0x59b33d17U, 0x2eb40d81U, 0xb7bd5c3bU, 0xc0ba6cadU, 0xedb88320U, 0x9abfb3b6U, 0x03b6e20cU, 0x74b1d29aU,
    0xead54739U, 0x9dd277afU, 0x04db2615U, 0x73dc1683U, 0xe3630b12U, 0x94643b84U, 0x0d6d6a3eU, 0x7a6a5aa8U, 0xe40ecf0bU, 0x9309ff9dU, 0x0a00ae27U, 0x7d079eb1U,
    0xf00f9344U, 0x8708a3d2U, 0x1e01f268U, 0x6906c2feU, 0xf762575dU, 0x806567cbU, 0x196c3671U, 0x6e6b06e7U, 0xfed41b76U, 0x89d32be0U, 0x10da7a5aU, 0x67dd4accU,
    0xf9b9df6fU, 0x8ebeeff9U, 0x17b7be43U, 0x60b08ed5U, 0xd6d6a3e8U, 0xa1d1937eU, 0x38d8c2c4U, 0x4fdff252U, 0xd1bb67f1U, 0xa6bc5767U, 0x3fb506ddU, 0x48b2364bU,
    0xd80d2bdaU, 0xaf0a1b4cU, 0x36034af6U, 0x41047a60U, 0xdf60efc3U, 0xa867df55U, 0x316e8eefU, 0x4669be79U, 0xcb61b38cU, 0xbc66831aU, 0x256fd2a0U, 0x5268e236U,
    0xcc0c7795U, 0xbb0b4703U, 0x220216b9U, 0x5505262fU, 0xc5ba3bbeU, 0xb2bd0b28U, 0x2bb45a92U, 0x5cb36a04U, 0xc2d7ffa7U, 0xb5d0cf31U, 0x2cd99e8bU, 0x5bdeae1dU,
    0x9b64c2b0U, 0xec63f226U, 0x756aa39cU, 0x026d930aU, 0x9c0906a9U, 0xeb0e363fU, 0x72076785U, 0x05005713U, 0x95bf4a82U, 0xe2b87a14U, 0x7bb12baeU, 0x0cb61b38U,
    0x92d28e9bU, 0xe5d5be0dU, 0x7cdcefb7U, 0x0bdbdf21U, 0x86d3d2d4U, 0xf1d4e242U, 0x68ddb3f8U, 0x1fda836eU, 0x81be16cdU, 0xf6b9265bU, 0x6fb077e1U, 0x18b74777U,
    0x88085ae6U, 0xff0f6a70U, 0x66063bcaU, 0x11010b5cU, 0x8f659effU, 0xf862ae69U, 0x616bffd3U, 0x166ccf45U, 0xa00ae278U, 0xd70dd2eeU, 0x4e048354U, 0x3903b3c2U,
    0xa7672661U, 0xd06016f7U, 0x4969474dU, 0x3e6e77dbU, 0xaed16a4aU, 0xd9d65adcU, 0x40df0b66U, 0x37d83bf0U, 0xa9bcae53U, 0xdebb9ec5U, 0x47b2cf7fU, 0x30b5ffe9U,
    0xbdbdf21cU, 0xcabac28aU, 0x53b39330U, 0x24b4a3a6U, 0xbad03605U, 0xcdd70693U, 0x54de5729U, 0x23d967bfU, 0xb3667a2eU, 0xc4614ab8U, 0x5d681b02U, 0x2a6f2b94U,
    0xb40bbe37U, 0xc30c8ea1U, 0x5a05df1bU, 0x2d02ef8dU,
};

// crc32
inline constexpr std::uint32_t crc32(const void* buf, std::size_t len, std::uint32_t crc = 0) noexcept {
    const unsigned char* buf_b = static_cast<const unsigned char*>(buf);
    const unsigned char* const buf_end = buf_b + len;
    crc = ~crc;
    while (buf_b != buf_end) {
        crc = crc32_table_internal_[(crc ^ (*buf_b++)) & 0xFF] ^ (crc >> 8);
    }
    return crc ^ 0xFFFFFFFF;
}

// md5
// See https://en.wikipedia.org/wiki/MD5
// Modified from public domain code from https://github.com/libtom/libtomcrypt

#define ESL_FF_(a, b, c, d, M, s, t)                                                                                                                           \
    a = (a + (d ^ (b & (c ^ d))) + M + t);                                                                                                                     \
    a = rotl(a, s) + b;
#define ESL_GG_(a, b, c, d, M, s, t)                                                                                                                           \
    a = (a + (c ^ (d & (c ^ b))) + M + t);                                                                                                                     \
    a = rotl(a, s) + b;
#define ESL_HH_(a, b, c, d, M, s, t)                                                                                                                           \
    a = (a + (b ^ c ^ d) + M + t);                                                                                                                             \
    a = rotl(a, s) + b;
#define ESL_II_(a, b, c, d, M, s, t)                                                                                                                           \
    a = (a + (c ^ (b | (~d))) + M + t);                                                                                                                        \
    a = rotl(a, s) + b;

inline void md5_compress_internal_(std::uint32_t (&state)[4], const unsigned char* buf) {
    std::uint32_t W[16], a, b, c, d;

    for (int i = 0; i < 16; ++i) {
        W[i] = load32le(buf + (i * 4));
    }

    a = state[0];
    b = state[1];
    c = state[2];
    d = state[3];

    ESL_FF_(a, b, c, d, W[0], 7, 0xd76aa478U)
    ESL_FF_(d, a, b, c, W[1], 12, 0xe8c7b756U)
    ESL_FF_(c, d, a, b, W[2], 17, 0x242070dbU)
    ESL_FF_(b, c, d, a, W[3], 22, 0xc1bdceeeU)
    ESL_FF_(a, b, c, d, W[4], 7, 0xf57c0fafU)
    ESL_FF_(d, a, b, c, W[5], 12, 0x4787c62aU)
    ESL_FF_(c, d, a, b, W[6], 17, 0xa8304613U)
    ESL_FF_(b, c, d, a, W[7], 22, 0xfd469501U)
    ESL_FF_(a, b, c, d, W[8], 7, 0x698098d8U)
    ESL_FF_(d, a, b, c, W[9], 12, 0x8b44f7afU)
    ESL_FF_(c, d, a, b, W[10], 17, 0xffff5bb1U)
    ESL_FF_(b, c, d, a, W[11], 22, 0x895cd7beU)
    ESL_FF_(a, b, c, d, W[12], 7, 0x6b901122U)
    ESL_FF_(d, a, b, c, W[13], 12, 0xfd987193U)
    ESL_FF_(c, d, a, b, W[14], 17, 0xa679438eU)
    ESL_FF_(b, c, d, a, W[15], 22, 0x49b40821U)
    ESL_GG_(a, b, c, d, W[1], 5, 0xf61e2562U)
    ESL_GG_(d, a, b, c, W[6], 9, 0xc040b340U)
    ESL_GG_(c, d, a, b, W[11], 14, 0x265e5a51U)
    ESL_GG_(b, c, d, a, W[0], 20, 0xe9b6c7aaU)
    ESL_GG_(a, b, c, d, W[5], 5, 0xd62f105dU)
    ESL_GG_(d, a, b, c, W[10], 9, 0x02441453U)
    ESL_GG_(c, d, a, b, W[15], 14, 0xd8a1e681U)
    ESL_GG_(b, c, d, a, W[4], 20, 0xe7d3fbc8U)
    ESL_GG_(a, b, c, d, W[9], 5, 0x21e1cde6U)
    ESL_GG_(d, a, b, c, W[14], 9, 0xc33707d6U)
    ESL_GG_(c, d, a, b, W[3], 14, 0xf4d50d87U)
    ESL_GG_(b, c, d, a, W[8], 20, 0x455a14edU)
    ESL_GG_(a, b, c, d, W[13], 5, 0xa9e3e905U)
    ESL_GG_(d, a, b, c, W[2], 9, 0xfcefa3f8U)
    ESL_GG_(c, d, a, b, W[7], 14, 0x676f02d9U)
    ESL_GG_(b, c, d, a, W[12], 20, 0x8d2a4c8aU)
    ESL_HH_(a, b, c, d, W[5], 4, 0xfffa3942U)
    ESL_HH_(d, a, b, c, W[8], 11, 0x8771f681U)
    ESL_HH_(c, d, a, b, W[11], 16, 0x6d9d6122U)
    ESL_HH_(b, c, d, a, W[14], 23, 0xfde5380cU)
    ESL_HH_(a, b, c, d, W[1], 4, 0xa4beea44U)
    ESL_HH_(d, a, b, c, W[4], 11, 0x4bdecfa9U)
    ESL_HH_(c, d, a, b, W[7], 16, 0xf6bb4b60U)
    ESL_HH_(b, c, d, a, W[10], 23, 0xbebfbc70U)
    ESL_HH_(a, b, c, d, W[13], 4, 0x289b7ec6U)
    ESL_HH_(d, a, b, c, W[0], 11, 0xeaa127faU)
    ESL_HH_(c, d, a, b, W[3], 16, 0xd4ef3085U)
    ESL_HH_(b, c, d, a, W[6], 23, 0x04881d05U)
    ESL_HH_(a, b, c, d, W[9], 4, 0xd9d4d039U)
    ESL_HH_(d, a, b, c, W[12], 11, 0xe6db99e5U)
    ESL_HH_(c, d, a, b, W[15], 16, 0x1fa27cf8U)
    ESL_HH_(b, c, d, a, W[2], 23, 0xc4ac5665U)
    ESL_II_(a, b, c, d, W[0], 6, 0xf4292244U)
    ESL_II_(d, a, b, c, W[7], 10, 0x432aff97U)
    ESL_II_(c, d, a, b, W[14], 15, 0xab9423a7U)
    ESL_II_(b, c, d, a, W[5], 21, 0xfc93a039U)
    ESL_II_(a, b, c, d, W[12], 6, 0x655b59c3U)
    ESL_II_(d, a, b, c, W[3], 10, 0x8f0ccc92U)
    ESL_II_(c, d, a, b, W[10], 15, 0xffeff47dU)
    ESL_II_(b, c, d, a, W[1], 21, 0x85845dd1U)
    ESL_II_(a, b, c, d, W[8], 6, 0x6fa87e4fU)
    ESL_II_(d, a, b, c, W[15], 10, 0xfe2ce6e0U)
    ESL_II_(c, d, a, b, W[6], 15, 0xa3014314U)
    ESL_II_(b, c, d, a, W[13], 21, 0x4e0811a1U)
    ESL_II_(a, b, c, d, W[4], 6, 0xf7537e82U)
    ESL_II_(d, a, b, c, W[11], 10, 0xbd3af235U)
    ESL_II_(c, d, a, b, W[2], 15, 0x2ad7d2bbU)
    ESL_II_(b, c, d, a, W[9], 21, 0xeb86d391U)

    state[0] += a;
    state[1] += b;
    state[2] += c;
    state[3] += d;
}

#undef ESL_FF_
#undef ESL_GG_
#undef ESL_HH_
#undef ESL_II_

class md5val;
class md5_state;
md5_state& md5(const void* buf, std::size_t len, md5_state& state) noexcept;

class md5_state {
    friend class md5val;
    friend md5_state& md5(const void* buf, std::size_t len, md5_state& state) noexcept;

private:
    std::uint32_t state_[4];
    std::size_t length_;
    std::size_t curlen_;
    unsigned char buf_[64];

public:
    md5_state() noexcept : state_{0x67452301U, 0xefcdab89U, 0x98badcfeU, 0x10325476U}, length_(0), curlen_(0) {}

    md5_state(const void* buf, std::size_t len) noexcept : md5_state() {
        this->update(buf, len);
    }

    md5_state(const md5_state&) = default;

    md5_state& operator=(const md5_state&) = default;

    void update(const void* buf, std::size_t len) noexcept;

protected:
    md5val finish() && noexcept;
};

inline void md5_state::update(const void* buf, std::size_t len) noexcept {
    const unsigned char* in = static_cast<const unsigned char*>(buf);
    while (len) {
        if (curlen_ == 0 && len >= 64) {
            md5_compress_internal_(state_, in);
            length_ += 64;
            in += 64;
            len -= 64;
        } else {
            const std::size_t n = std::min(len, 64 - curlen_);
            std::memcpy(buf_ + curlen_, in, n);
            curlen_ += n;
            in += n;
            len -= n;
            if (curlen_ == 64) {
                md5_compress_internal_(state_, buf_);
                length_ += 64;
                curlen_ = 0;
            }
        }
    }
}

class md5val : public std::array<unsigned char, 16> {
public:
    md5val() noexcept = default;

    md5val(const md5_state& state) noexcept : md5val(md5_state(state).finish()) {}

    md5val(md5_state&& state) noexcept : md5val(std::move(state).finish()) {}

    std::string to_string() const {
        return {reinterpret_cast<const char*>(this->data()), this->size()};
    }

    std::string to_hex_string(const hex_option& option = hex_lowercase) const {
        return hex_encode(this->data(), this->size(), option);
    }
};

inline md5val md5_state::finish() && noexcept {
    length_ += curlen_;
    buf_[curlen_++] = 0x80;
    if (curlen_ > 56) {
        while (curlen_ < 64) {
            buf_[curlen_++] = 0;
        }
        md5_compress_internal_(state_, buf_);
        curlen_ = 0;
    }
    while (curlen_ < 56) {
        buf_[curlen_++] = 0;
    }
    store64le(length_ * 8, buf_ + 56);
    md5_compress_internal_(state_, buf_);

    md5val val;
    for (int i = 0; i < 4; ++i) {
        store32le(state_[i], val.data() + (i * 4));
    }
    return val;
}

// md5
inline md5_state& md5(const void* buf, std::size_t len, md5_state& state) noexcept {
    state.update(buf, len);
    return state;
}
inline md5_state md5(const void* buf, std::size_t len) noexcept {
    md5_state state;
    return md5(buf, len, state);
}

} // namespace esl

#endif // ESL_FUNCTIONAL_HPP
